
services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: eu_green_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-eu_green_chatbot}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - eu_green_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-eu_green_chatbot}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: eu_green_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-your_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - eu_green_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eu_green_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-eu_green_chatbot}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      
      # API Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      TAVILY_API_KEY: ${TAVILY_API_KEY:-}
      FIRECRAWL_API_KEY: ${FIRECRAWL_API_KEY:-}
      
      # Application Settings
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      API_V1_PREFIX: ${API_V1_PREFIX:-/api/v1}
      
      # Security Settings
      SECRET_KEY: ${SECRET_KEY:-your_very_secure_secret_key_change_this}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080,http://frontend:3000}
      
      # Monitoring and Analytics
      ENABLE_MONITORING: ${ENABLE_MONITORING:-true}
      ENABLE_ANALYTICS: ${ENABLE_ANALYTICS:-true}
      
      # EU AI Act Compliance
      ENABLE_AUDIT_LOGGING: ${ENABLE_AUDIT_LOGGING:-true}
      TRANSPARENCY_DISCLOSURE_REQUIRED: ${TRANSPARENCY_DISCLOSURE_REQUIRED:-true}
      
      # Performance Settings
      WORKERS: ${WORKERS:-4}
      MAX_CONCURRENT_REQUESTS: ${MAX_CONCURRENT_REQUESTS:-100}
      
      # Cache Settings
      CACHE_TTL_SECONDS: ${CACHE_TTL_SECONDS:-3600}
      ENABLE_REDIS_CACHING: ${ENABLE_REDIS_CACHING:-true}
      
      # Vector Database Settings  
      VECTOR_DIMENSION: ${VECTOR_DIMENSION:-3072}
      ENABLE_VECTOR_SEARCH: ${ENABLE_VECTOR_SEARCH:-true}
      
      # Document Processing Settings
      CHUNK_SIZE: ${CHUNK_SIZE:-800}
      CHUNK_OVERLAP: ${CHUNK_OVERLAP:-300}
      
      # OpenAI Embeddings Settings
      OPENAI_EMBEDDING_MODEL: ${OPENAI_EMBEDDING_MODEL:-text-embedding-3-large}
      
      # Multilingual Settings
      DEFAULT_LANGUAGE: ${DEFAULT_LANGUAGE:-en}
      SUPPORTED_LANGUAGES: ${SUPPORTED_LANGUAGES:-en,fr,de,es,it,pt,pl,nl,sv}
      
      # Audio Processing Settings
      TEMP_DIR: ${TEMP_DIR:-/tmp/audio}
      MAX_AUDIO_SIZE: ${MAX_AUDIO_SIZE:-26214400}
      
      # Deployment Environment
      ENVIRONMENT: ${ENVIRONMENT:-production}
      
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./backend/data:/app/data
      - ./training_docs:/app/training_docs
      - /tmp/audio:/tmp/audio
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - eu_green_network
    deploy:
      resources:
        limits:
          memory: ${BACKEND_MEMORY_LIMIT:-2G}
          cpus: ${BACKEND_CPU_LIMIT:-1.5}
        reservations:
          memory: ${BACKEND_MEMORY_RESERVE:-512M}
          cpus: ${BACKEND_CPU_RESERVE:-0.5}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 8s
      retries: 5
      start_period: 60s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
        NEXT_PUBLIC_ENVIRONMENT: ${ENVIRONMENT:-production}
    container_name: eu_green_frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
      NEXT_PUBLIC_ENVIRONMENT: ${ENVIRONMENT:-production}
      NEXT_PUBLIC_ENABLE_ANALYTICS: ${ENABLE_ANALYTICS:-true}
      NEXT_PUBLIC_DEFAULT_LANGUAGE: ${DEFAULT_LANGUAGE:-en}
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - eu_green_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 25s
      retries: 5
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: eu_green_nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    networks:
      - eu_green_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    profiles:
      - production

  # Database Backup Service
  backup:
    image: prodrigestivill/postgres-backup-local:latest
    container_name: eu_green_backup
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-eu_green_chatbot}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
      POSTGRES_EXTRA_OPTS: -Z6 --schema=public --blobs
      SCHEDULE: ${BACKUP_SCHEDULE:-@daily}
      BACKUP_KEEP_DAYS: ${BACKUP_KEEP_DAYS:-7}
      BACKUP_KEEP_WEEKS: ${BACKUP_KEEP_WEEKS:-4}
      BACKUP_KEEP_MONTHS: ${BACKUP_KEEP_MONTHS:-6}
    volumes:
      - ./backups:/backups
    networks:
      - eu_green_network
    profiles:
      - backup

  # Monitoring Services (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: eu_green_prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - eu_green_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: eu_green_grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: ${GF_INSTALL_PLUGINS:-}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - eu_green_network
    profiles:
      - monitoring


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  eu_green_network:
    driver: bridge